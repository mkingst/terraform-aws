- hosts: nginx
  remote_user: admin #user on the ec2 instance
  become: yes
  vars_files:
    - keys.yml
  tasks:
  - name: Remove any OS docker packages
    apt:
      name:
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
      state: absent

  - name: Install pre-requisite packages
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
      state: latest

  - name: Add the Docker Repo Key
    apt_key:
      url: https://download.docker.com/linux/debian/gpg 
      state: present

  - name: Add the Docker Repo
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/debian   buster stable
      state: present
      update_cache: yes

  - name: Install Docker
    apt:
      name:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - python2.7
        - python3-docker
      state: latest

  - name: Add user to the docker group
    user:
      name: admin
      append: yes
      groups: docker

  - name: Reset the SSH connection to pick up new groups
    meta: reset_connection

  - name: Create a Docker network
    docker_network:
      name: mk_network
      ipam_config:
       - subnet: '172.18.0.0/24'
         gateway: '172.18.0.1'

  - name: Install MYSQL 
    docker_container:
      name: mysql-wp
      image: mysql:5.7
      hostname: mysql-wp
      networks:
        - name: mk_network
          ipv4_address: 172.18.0.10
      env:
        MYSQL_ROOT_PASSWORD: ChangeMe

  - name: Sleep for a few seconds to let database start up
    wait_for:
      timeout: 20

  - name: Create MySQL DB
    command:  "{{ item }}"
    with_items:
      - docker exec -t mysql-wp mysql -u root -pChangeMe -e 'create database WP1'
      - docker exec -t mysql-wp mysql -u root -pChangeMe -e 'create database WP2'
    ignore_errors: true

  - name: Deploy Wordpress Container 1
    docker_container:
      name: wp1
      image: wordpress:4.8
      hostname: wp1
      networks:
        - name: mk_network
          ipv4_address: 172.18.0.11
      links:
        - mysql-wp:mysql
      ports:
        - "11081:80"
      env:
        WORDPRESS_DB_HOST: mysql-wp
        WORDPRESS_DB_USER: root
        WORDPRESS_DB_PASSWORD: ChangeMe
        WORDPRESS_DB_NAME: WP1

  - name: Deploy Wordpress Container 2
    docker_container:
      name: wp2
      image: wordpress:4.8
      hostname: wp2
      networks:
        - name: mk_network
          ipv4_address: 172.18.0.12
      links:
        - mysql-wp:mysql
      ports:
        - "11082:80"
      env:
        WORDPRESS_DB_HOST: mysql-wp
        WORDPRESS_DB_USER: root
        WORDPRESS_DB_PASSWORD: ChangeMe
        WORDPRESS_DB_NAME: WP2

  - name: Deploy Arcadia Container - main
    docker_container:
      name: mainapp
      hostname: mainapp
      image: registry.gitlab.com/arcadia-application/main-app/mainapp:latest
      networks:
        - name: mk_network
      published_ports:
        - 0.0.0.0:8005:80

  - name: Deploy Arcadia Container - backend
    docker_container:
      name: backend
      hostname: backend
      image: registry.gitlab.com/arcadia-application/back-end/backend:latest
      networks:
        - name: mk_network
      published_ports:
       - 0.0.0.0:8006:80

  - name: Deploy Arcadia Container - app2
    docker_container:
      name: app2
      hostname: app2
      image: registry.gitlab.com/arcadia-application/app2/app2:latest
      networks:
        - name: mk_network
      published_ports:
        - 0.0.0.0:8007:80

  - name: Deploy Arcadia Container - app3
    docker_container:
      name: app3
      hostname: app3
      image: registry.gitlab.com/arcadia-application/app3/app3:latest
      networks:
        - name: mk_network
      published_ports:
        - 0.0.0.0:8008:80

  - name: Copy over the docker build for ErgastDB 
    copy:
      src: ergast-f1-api
      dest: /home/admin/
      mode: preserve

  - name: Build the docker container
    docker_image:
      build:
        path: /home/admin/ergast-f1-api
      name: ergastf1
      tag: latest
      source: build

  - name: Deploy the container
    docker_container:
      name: ergastf1
      image: ergastf1:latest
      networks:
      - name: mk_network
        ipv4_address: 172.18.0.20
      state: started
      published_ports:
        - 0.0.0.0:8001:80

  - name: Deploy Keycloak
    docker_container:
      name: keycloak
      image: jboss/keycloak
      hostname: keycloak_idp
      networks:
        - name: mk_network
          ipv4_address: 172.18.0.25
      ports:
        - "8080:8080"
      env:
        KEYCLOAK_USER: admin 
        KEYCLOAK_PASSWORD: ChangeMe

  - name: Sleep for a few seconds to let keycloak start up
    wait_for:
      timeout: 15

  - name: Configure Keycloak for HTTP since HTTPS is enabled
    command:  "{{ item }}"
    with_items:
      - docker exec -t keycloak bash /opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password ChangeMe
      - docker exec -t keycloak bash /opt/jboss/keycloak/bin/kcadm.sh update realms/master -s sslRequired=NONE
    ignore_errors: true


  - name: Copy NGINX Congifuration Files
    copy:
      src: nginx-confs/
      dest: /etc/nginx/conf.d/
      mode: preserve

  - name: get rid of nginx default configuration
    command: mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.old

  - name: reload nginx daemon
    systemd:
      name: nginx
      state: restarted #this can be reloaded

